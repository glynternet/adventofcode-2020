module Day3 exposing (main)

import Browser
import Dict
import Html exposing (Html, div, node, text)
import Html.Attributes exposing (href, rel)


main =
    Browser.sandbox
        { init = inputReal
        , view = view
        , update = update
        }


type Msg
    = Update


update msg model =
    case msg of
        Update ->
            model


type alias XY =
    { x : Int
    , y : Int
    }


trees : List String -> List XY
trees mapLines =
    mapLines
        |> List.map (String.indices "#")
        |> List.indexedMap (\y rowXs -> List.map (\x -> XY x y) rowXs)
        |> List.concat


part1 : ( XY, XY, List String ) -> String
part1 ( start, direction, mapRows ) =
    mapRows
        |> trees
        |> List.length
        |> String.fromInt


part2 : List String -> String
part2 model =
    model
        |> List.length
        |> String.fromInt


mapWidth : List String -> Int
mapWidth mapRows =
    List.head mapRows |> Maybe.map String.length |> Maybe.withDefault 9999


mapHeight : List String -> Int
mapHeight mapRows =
    List.length mapRows


view ( start, direction, treeRows ) =
    let
        treesByRow =
            treesByRowDict <| trees treeRows

        height =
            Debug.log "mapHeight" <| mapHeight treeRows

        width =
            Debug.log "mapWidth" <| mapWidth treeRows
    in
    div [] <|
        [ css "/style.css" ]
            ++ [ div [] [ text "Part 1" ] ]
            ++ partView ( start, direction, treeRows ) part1 Nothing
            ++ [ div [] [ text "Part 1 Map" ] ]
            ++ [ div [] [ inputSledPositions ( start, direction, treeRows ) |> List.length |> String.fromInt |> text ] ]
            ++ [ div [] (inputSledPositions ( start, direction, treeRows ) |> List.map (\pos -> div [] [ text <| positionStr pos ])) ]
            ++ [ div []
                    [ inputSledPositions ( start, direction, treeRows )
                        |> List.map
                            (\pos ->
                                trees treeRows
                                    |> List.filter
                                        (\tree ->
                                            tree.y
                                                == modBy height pos.y
                                                && tree.x
                                                == modBy width pos.x
                                        )
                                    |> (\matches -> List.length matches == 1)
                            )
                        --|> List.map (\matches -> div [] [ text <| String.join "\t" (matches |> List.map positionStr) ])
                        |> List.filter (\b -> b)
                        |> List.map
                            (\boool ->
                                if boool then
                                    div [] [ text "T" ]

                                else
                                    div [] [ text "F" ]
                            )
                        |> List.length
                        |> (\len -> div [] [ text <| String.fromInt len ])
                    ]
               ]
            ++ (treeRows
                    |> List.indexedMap
                        (\i mapRow ->
                            div []
                                [ text <|
                                    mapRow
                                        ++ "\ty:"
                                        ++ String.fromInt i
                                        ++ " | \t"
                                        ++ String.join "\t"
                                            (Dict.get i treesByRow
                                                |> Maybe.map (List.map positionStr)
                                                |> Maybe.map List.reverse
                                                |> Maybe.withDefault []
                                            )
                                ]
                        )
               )
            ++ [ div [] [ text "Part 1 Trees'" ] ]
            ++ (trees treeRows |> List.map (\tree -> div [] [ text <| positionStr tree ]))
            ++ [ div [] [ text "Part 2" ] ]
            ++ partView treeRows part2 Nothing


inputSledPositions : ( XY, XY, List String ) -> List XY
inputSledPositions ( start, direction, treeRows ) =
    sledPositions (summedXY start direction) direction (List.length treeRows - 1)


sledPositions : XY -> XY -> Int -> List XY
sledPositions current direction maxHeight =
    if current.y > maxHeight then
        []

    else
        current :: sledPositions (summedXY current direction) direction maxHeight


summedXY : XY -> XY -> XY
summedXY a b =
    XY (a.x + b.x) (a.y + b.y)


treesByRowDict : List XY -> Dict.Dict Int (List XY)
treesByRowDict positions =
    --foldl : (a -> b -> b) -> b -> List a -> b
    positions
        |> listToMultiDict .y


positionStr : XY -> String
positionStr pos =
    "(" ++ String.fromInt pos.x ++ "," ++ String.fromInt pos.y ++ ")"


css path =
    node "link" [ rel "stylesheet", href path ] []


partView : model -> (model -> String) -> Maybe String -> List (Html Msg)
partView model solve expected =
    let
        answer =
            solve model
    in
    expected
        |> Maybe.map (\e -> checkExpected e answer)
        |> Maybe.withDefault answer
        |> (\str -> [ text str ])
        |> div []
        |> List.singleton


checkExpected : String -> String -> String
checkExpected expected actual =
    if expected /= actual then
        "Expected " ++ expected ++ " but got " ++ actual

    else
        actual


listToMultiDict : (thing -> comparable) -> List thing -> Dict.Dict comparable (List thing)
listToMultiDict map things =
    things
        |> List.map (\thing -> ( map thing, thing ))
        |> entrylistToMultiDict


entrylistToMultiDict : List ( comparable, thing ) -> Dict.Dict comparable (List thing)
entrylistToMultiDict entries =
    List.foldl
        (\( key, value ) currDict ->
            Dict.get key currDict
                |> Maybe.map
                    (\currEntries ->
                        Dict.insert key (value :: currEntries) currDict
                    )
                |> Maybe.withDefault (Dict.insert key [ value ] currDict)
        )
        Dict.empty
        entries


inputTest : ( XY, XY, List String )
inputTest =
    ( XY 0 0
    , XY 3 1
    , [ "..##......."
      , "#...#...#.."
      , ".#....#..#."
      , "..#.#...#.#"
      , ".#...##..#."
      , "..#.##....."
      , ".#.#.#....#"
      , ".#........#"
      , "#.##...#..."
      , "#...##....#"
      , ".#..#...#.#"
      ]
    )


inputReal : ( XY, XY, List String )
inputReal =
    ( XY 0 0
    , XY 3 1
    , [ ".##......#.##..#..#..##....#..."
      , "...##.....#...###........###..."
      , "#....##....#.....#.....#..##.##"
      , ".......#.###.#......#..#..#..#."
      , "##..........#....#.#...#......."
      , "###.#.#.#......##...#.........."
      , ".#.##........#..............#.."
      , "..#..........#...##..#.......##"
      , ".........##...#...#....###.#..."
      , "#.......#.....#.#.#...###.##.#."
      , "...#...#...#......#........#.##"
      , "....#..........#.....#..#....##"
      , ".#.#.##....#.#...#............."
      , "#....#..#.....#.#.............."
      , "........#....#....#..#........#"
      , "..#.......#...#....##.#........"
      , "......#.........##.......#.#..."
      , "............#.......#.........."
      , ".....#..#.#..#........##...#..."
      , "....#.....................###.."
      , "..#.......#.........#..##....##"
      , "..#........#..#...#........#..."
      , "..............#....##..##....#."
      , "....#..#.#.......#....#..#...##"
      , ".#........##......#.#..#.#....."
      , "............#.##...##...#...##."
      , ".......#........#.........##..."
      , "...#...........#.#...#..#......"
      , "#...#............#..####......."
      , "..#..#..#..#.....#...#.#.#....."
      , "....#.#..............#.....##.."
      , "#.....##........#......#......."
      , ".....#..#................##.#.."
      , ".###.#...................#....."
      , "....#....#...#.##..........#..."
      , ".#.....#....#.......#...#......"
      , ".....#...#.##.##............#.."
      , "..........#..#....#...#.#..#..."
      , "#...#..#..............###.#...#"
      , "......#....#.#....##....#......"
      , "............#......#......##..."
      , ".#....#...#........#.#.#..#...."
      , "..#.....#.......#.....#.#......"
      , "#....#......#.......#......#..."
      , "....#..##.....#...#........#..."
      , ".#..#......#..#................"
      , ".#...#...#....#.#...#.....#...#"
      , "......#..#...#...#..#.......##."
      , "...#..#...#.#.......#.......#.."
      , "..#...#.........#......#......#"
      , "......#...#..#..........#......"
      , ".#..#......#....#.#.#...#....#."
      , ".#.#....#.#.#..#..#..#........#"
      , "....###.#...##..#.#..#....#...."
      , "...#.#.#................#......"
      , ".#.....#..#..........##..#....#"
      , "..........#..#......#.........#"
      , ".....#....#...#.#..##....#.#.#."
      , "........#.##......###.........."
      , "##......#.#..#.....#..##.#....."
      , ".#.......#..#....##.....##....."
      , ".....##....#..................."
      , "##......#....##........#.....#."
      , "..##...#...........##........#."
      , "...#....#..##.#....#......##..."
      , "#....#...##....#..........#...."
      , "......##....#...............#.."
      , "...#.#.#...#...#...#..........."
      , "....#..#...#.#....#.#......#..."
      , ".......#...#...............#..."
      , ".##..#....#...#....#.#........#"
      , ".....#..##............#......#."
      , "...##...#.....#..........#.#..#"
      , "..#..##.............#....#....."
      , ".....#.#.....#.........#......#"
      , "........#..........#.#.#...#..#"
      , "#........#.#..................."
      , "......#......##..............#."
      , "......#..#.#.....#...#.#...#..."
      , ".#..##.....#...##.......#......"
      , "#.......#....#..##....#..#.#..."
      , "#..#..#....#...........#.##...."
      , "..##....#....##.....#...#...##."
      , ".#.......#.......#....#.......#"
      , ".#..#..#...#...#..............."
      , ".#..............#.....#........"
      , "..........##...#....#.#......##"
      , "..........#..........#.......#."
      , "..#..##....##...#.......#......"
      , ".#......#.#........##.#........"
      , "...#......#..#....#...#....#..."
      , "...............#....#..#.##...#"
      , "....#.......................#.."
      , "#....##.#......#....#.........."
      , ".......#.#......#........#..##."
      , "..#.....#...#...........##..#.."
      , "#........#.#....#............#."
      , ".........##..................#."
      , "........#...#..#...#......#...#"
      , "...#.......#...####.#...#......"
      , "....#..###......###..#........."
      , ".....#...........#......#......"
      , ".#.....#......#.....#.....##.##"
      , ".#.#...##..........#........#.#"
      , "..#....#.....##...............#"
      , ".....##.....#...##..#.........."
      , ".#......##.......#..##.##.#...#"
      , ".#..#...#.##.....#.#..........."
      , ".........#....##...#.....##...."
      , "#..........#.............#..#.#"
      , "...........#........#.#...#...."
      , "........#..###...#...........#."
      , "#.........#...#....#..##.##...."
      , "........#....##.......#.#....#."
      , "..........#..............#....."
      , "....##...#...##..........#....."
      , "...#..##.#...###..#............"
      , "...##..#####....#.............#"
      , ".#..#.......##.......#........#"
      , "....##..........#.......#.#...."
      , "......#.........####.......#..."
      , "...............#......#..#....."
      , "...#...##...#.#.#.....##.#.#..."
      , "..#....#..#..............#....#"
      , "#..............#............#.."
      , ".#.#..#....#.....#.#.#...#....."
      , "......#......#..#..#.....#....."
      , ".#.#..#.##.#........#.........."
      , "..##.#......#..#.......#......."
      , ".##...##....#..#.#.........#.##"
      , ".........#........#.#..###....#"
      , ".....#...............#........."
      , "......##..........#.....#......"
      , ".#.....#.#.#..#.#.....#..#.####"
      , ".......###.##......#.....#.#..#"
      , "..#.....#....#.#.##......#....#"
      , ".....##..#................#..##"
      , ".#......#.....#..#.....#..#####"
      , ".........#.#.......#..##...#..."
      , ".#.#..#.......##.....#....#...."
      , ".....#...###.#...#......#....#."
      , ".#....#....#...#..#.#........#."
      , "......##........##.#...#..#..#."
      , ".##.##.###..#.....#........###."
      , ".....#..#.#.......#..#.#......."
      , "##.#.#..............#..##......"
      , "....#.........#.......#.#......"
      , ".....#..#.....#...#.#....#.#..."
      , "...#..#.#.#..................#."
      , "........##.#.###..............."
      , "..#...#.#.......#......#......."
      , ".......#.##....#...#....#......"
      , "......#.#.............#........"
      , "........#......#........##.##.."
      , ".....#...#......##............."
      , "...#.#..#.....#.#...#.........."
      , ".#.#..#.....#............#....."
      , ".#.#..#.#.##.#...#.##..##...#.."
      , ".........##........#.##..#....."
      , "##.#.#......###..#.##.#........"
      , ".##...#..#...#.#..#....##.....#"
      , "#......#..........#.#...#.....#"
      , "..........#......#...#.......#."
      , ".............#..........#......"
      , "#.#....#.......##..#.....#.#..."
      , "##......#..#......#.#..#.#....#"
      , "..#.#..#.....#.#......#....#..#"
      , "...#......#......##.....#..#.#."
      , "....#......#.....#....#.#.#..#."
      , ".....#..#..#.....#...........##"
      , "....#.....#...#........##.#.#.#"
      , "..#......#.......#........#...."
      , "#.......##..##......#...####..#"
      , "#..........#......#.#..#..#...."
      , ".................##............"
      , "...#..#..#.#.....#.##.#.....#.#"
      , "...#....###...................."
      , "....#.......#..#.#............."
      , "#......#................#......"
      , "..........#........#..#........"
      , ".....#......##..#......#..###.."
      , "...#....#.......#.............."
      , ".#....#.#.#........#.....#...#."
      , ".......#.....##.#.....#....#..."
      , ".........#.#.........##..#...#."
      , "......#......#....#.....##.#.#."
      , "####...#.........#.....#......#"
      , "...#.#..#..#.............#....."
      , "......#.........#....#.#..##..#"
      , ".........#.....#.#..##..##..#.."
      , ".#......##.............#......."
      , "....#...#......#...#.....#.#.##"
      , "......#..##....#..#.....#......"
      , "......#..............#....##..."
      , ".........#.###..........#.##..."
      , "#....#..........#..#.......#..."
      , "...........#...#.....#.......#."
      , "..#..#........#................"
      , "...###.........#..............."
      , ".....#.##...#.................#"
      , "..#.#..#...###......#........#."
      , "#......#......#.#.............#"
      , ".........#.#.....#..#........#."
      , "........#..#......#......##...."
      , ".....#......#...#.....##...#.##"
      , ".##...#..#....##..........###.."
      , ".......#............#........##"
      , ".##.....#.......#...#.........."
      , "..###..........#.............##"
      , "#....#....#.#....#............#"
      , "#...#......................#..."
      , "....#..#..#..#.......###....#.."
      , "#..###.#..#.....#.............#"
      , "..........#.##.....#.........##"
      , "...#.............#....#....##.."
      , "#........................#..#.."
      , "........#...#.....#.....#..##.."
      , "#........#......#....#..#....#."
      , ".....#.#.#....#.#..#....#......"
      , ".....#....#...................."
      , ".........#..#..#....#......#..."
      , "..........#.#.#.......#........"
      , ".......#.#.....#..#.....##....."
      , ".....#....#.#.....#.......#..#."
      , ".#..###.......#......#..#..#..."
      , "..##.#.....#.........##.#......"
      , ".....#.......###.......##......"
      , "#...#.......##.#.#......#.....#"
      , ".##........##.#...#...#........"
      , "....#.......#....#..#.......#.."
      , ".#..#.......#..####..##........"
      , "..#..#..#..#..#..#............."
      , "...#......#...#...#.#......##.#"
      , "........#.#..#.#.#......#...#.."
      , "#.......#..##.......##........#"
      , "..##...#...............#.#....#"
      , ".####........##..........#..#.."
      , "..#........#...##...#........#."
      , ".#.#..........#...#...#........"
      , "....###..........#....#........"
      , ".#.#.#.###.#.##..#.#........#.."
      , "..........#....##.#..##........"
      , ".......#..#..##.......#........"
      , "..#........#....#..####.#..#..."
      , "....#.......#..##..#..........#"
      , ".....#...........#....#....#..."
      , ".#.##..#......##.........#.#..."
      , "...#......##..##......#.....#.."
      , "#........#..........#.#...#...."
      , ".#.#........###........#..#...."
      , "....#####.................##..."
      , ".........##...#......#........."
      , ".......#....#....#.#....#...#.."
      , "......#................#...#.#."
      , "....#.....#.....#.#.....#.....#"
      , "#.........#..#........#.....#.."
      , "....#...........#.....#.#......"
      , "##..#....................#.#..."
      , "#.#.##....#.....##....#.......#"
      , "..#..#....###.......#..##......"
      , "......##.....#.##...#....#..#.."
      , "........#..#.#..#..#.#........."
      , "#...#.....##..........##......."
      , "....#.....#...#.###.......#...."
      , "..........#..#...#........##..#"
      , "##..#...#.#.####.#..#..#...#..."
      , "................#......#..#...."
      , ".......#...###...#........#...."
      , "....#..##..#.#......#...#.#..##"
      , ".##......#...........#.......##"
      , "....#.#...#..#.#.......##......"
      , "....#..##..#.....#........##..."
      , "...#...#..#.#.#....#.........#."
      , "#....##.#....#..##............."
      , ".#......##......#.#.##.......#."
      , ".......#...#....#.##......#...."
      , "..##..........#.....#.#......#."
      , "#..##.....#..........##..#.#..."
      , "....#.#.......#.#.....#.....#.."
      , "##.....#..#.....##...#.....#..#"
      , "...#.#..#...#..............#..."
      , "...............#..#............"
      , ".#.......#......#........##...."
      , "..#......#..##..####.....#...#."
      , ".#.##.#.#..#..##..##..........."
      , "...##.............#.....#..#..."
      , ".##.....#..#.#......##........#"
      , "##....#.............#...#......"
      , "......#.....###...........##..."
      , ".#.#...#.............##..#..###"
      , "..#.##.##...#.....#...........#"
      , ".....#.....##...#...#........#."
      , "........#..##.......##.....#..."
      , ".#........####.......#.#...#..."
      , "...#..........#......##........"
      , ".......#......#..##..#...#....."
      , "..#...........#.#.#..#.#.#....."
      , "#..........#....#....###.#....."
      , "....#.................#...##..."
      , "#....#.###......#..#.....#...##"
      , ".#.......##.....###.....#...#.."
      , "....##............#...........#"
      , "...#.#.#.........#...#..#..#..#"
      , ".....#..###.................#.."
      , ".#.....#.....#....###.#..#...#."
      , "................#...#.........."
      , "..#....#..##....#.##........#.."
      , "....##....#...........#..#....."
      , "...##......###.......#...#....."
      , ".......##............#......#.#"
      , "#####.....#..#.###..#.#........"
      , "#.##.##..#.......#....#........"
      , "....###..#.#.#......###.#......"
      , "....#....#.....##.#..#....#...#"
      , "....#.....#.#...##.##.#.#....#."
      , ".........#.#.###.#.....#......."
      , ".#....#.......#..##...#....#..."
      , "...####...##.#.....#..........."
      , "#.....#.....#..........##..#..."
      , "................#.#.#......#..."
      , ".#...#.......#..#............#."
      , ".##.#.......#..#....#.....#...."
      , ".#...#..#.....#..............#."
      ]
    )
